class UsersController < ApplicationController
  # Be sure to include AuthenticationSystem in Application Controller instead
  include AuthenticatedSystem
  before_filter :login_required, :only => [:my, :update_my, :index, :show]

  def show
    @user = User.find(params[:id])
  end

  def index
    @users = User.all
  end

  # render new.rhtml
  def new
  end


  def my
    @user = User.find(session[:user_id])
    if !@user.color
      @user.color = COLORS[rand(COLORS.length)]
    end
  end

  def update_my
    @user = User.find(session[:user_id])
    @user.color = params[:user][:color].strip
    respond_to do |format|
      if @user.update_attributes(params[:user])
        puts @user.color
        flash[:notice] = 'User was successfully updated.'
        format.html { render :action => 'my'}
      else
        format.html { render :action => "my" }
      end
    end
  end

  def create
    cookies.delete :auth_token
    # protects against session fixation attacks, wreaks havoc with 
    # request forgery protection.
    # uncomment at your own risk
    # reset_session
    @user = User.new(params[:user])
    @user.color = COLORS[rand(COLORS.length)] #choose a custom color for him
    @user.save
    if @user.errors.empty?
      self.current_user = @user
      redirect_back_or_default('/')
      flash[:notice] = "Thanks for signing up!"
    else
      flash[:error]  = "We couldn't set up that account, sorry.  Please try again, or contact an admin (link is above)."
      render :action => 'new'
    end
  end

  def activate
    self.current_user = params[:activation_code].blank? ? false : User.find_by_activation_code(params[:activation_code])
    if logged_in? && !current_user.active?
      current_user.activate
      flash[:notice] = "Signup complete!"
    end
    redirect_back_or_default('/')
  end
  #
  # Change user passowrd
  def change_password
    
  end

  def change_password_update
    return unless request.post?
    if User.authenticate(current_user.login, params[:old_password])
      if ((params[:password] == params[:password_confirmation]) &&
            !params[:password_confirmation].blank?)
        current_user.password_confirmation = params[:password_confirmation]
        current_user.password = params[:password]

        if current_user.save
          flash[:notice] = "Password successfully updated"

          render :action => :change_password
        else
          flash[:alert] = "Password not changed"
          render :action => :change_password
        end

      else
        flash[:alert] = "New Password mismatch"
        @old_password = params[:old_password]
        render :action => :change_password
      end
    else
      flash[:alert] = "Old password incorrect"
      render :action => :change_password
    end
  end

  #gain email address
  def forgot_password
    return unless request.post?
    if @user = User.find_by_email(params[:user][:email])
      @user.forgot_password
      @user.save
      redirect_back_or_default('/')
      flash[:notice] = "A password reset link has been sent to your email address"
    else
      flash[:alert] = "Could not find a user with that email address"
    end
  end

  #reset password
  def reset_password
    @user = User.find_by_password_reset_code(params[:id])
    return if @user unless params[:user]

    if ((params[:user][:password] && params[:user][:password_confirmation]) &&
          !params[:user][:password_confirmation].blank?)
      self.current_user = @user #for the next two lines to work
      current_user.password_confirmation = params[:user][:password_confirmation]
      current_user.password = params[:user][:password]
      @user.reset_password
      flash[:notice] = current_user.save ? "Password reset success." : "Password reset failed."
      redirect_back_or_default('/')
    else
      flash[:alert] = "Password mismatch"
    end
  end
  
end
